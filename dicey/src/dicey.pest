WHITESPACE = _{ WHITE_SPACE }

statement = _{ (declaration | assignment) }
declaration = { "let" ~ identifier ~ "=" ~ (function | ( "$" ~ expression ) | lazy_expression) ~ ";" }
assignment = { "set" ~ qualify ~ "=" ~ (function | ( "$" ~ expression ) | lazy_expression) ~ ";" }

lazy_expression = { expression }
expression = { ( if_statement | block | logic_or ) }
block = { "{" ~ statement* ~ expression ~ "}" }
if_statement = { "if" ~ expression ~ "then" ~ expression ~ "else" ~ expression }

logic_or = { logic_and ~ ( "or" ~ logic_and )* }
logic_and = { equality ~ ( "and" ~ equality )* }

equality = { comparison ~ ( equality_op ~ comparison )* }
equality_op = { ( "==" | "!=" ) }

comparison = { term ~ ( comparison_op ~ term )* }
comparison_op = { ( ">=" | ">" | "<=" | "<" ) }

term = { factor ~ ( term_op ~ factor )* }
term_op = { ( "-" | "+" ) }

factor = { unary ~ ( factor_op ~ unary )* }
factor_op = { ( "/" | "*" | "%" ) }

unary = { unary_op* ~ qualify }
unary_op = { ( "!" | "-" ) }

qualify = { ( primary ~ ( "(" ~ call_args ~ ")" | "[" ~ index ~ "]" | ("." ~ identifier) )* ) }
call_args = { ( argument ~ ("," ~ argument)* ~ ","? )? }
argument = _{ ( "$" ~ strict_argument | lazy_argument )? }
lazy_argument = { expression }
strict_argument = { expression }
index = { expression }

primary = _{ ( number_or_roll | boolean | list | function | identifier | "(" ~ expression ~ ")" ) }
number_or_roll = @{
    (
          "d" ~ ASCII_DIGIT+
        | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ~ ( ("d" ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) | ("." ~ ASCII_DIGIT*)? )
        | "0" ~ ("." ~ ASCII_DIGIT*)?
        | ("." ~ ASCII_DIGIT+)
    )
}
boolean = @{ "true" | "false" }
identifier = @{ ( XID_START | "_" ) ~ XID_CONTINUE* }
function = { parameters ~ expression }
parameters = { "|" ~ ( identifier ~ ("," ~ identifier)* ~ ","? )? ~ "|" }
list = { "[" ~ list_items ~ "]" }
list_items = _{ ( expression ~ ("," ~ expression)* ~ ","? )?  }

file = { SOI ~ statement* ~ expression ~ EOI }